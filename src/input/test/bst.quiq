struct BstNodeAddParams<T> {
  self: ref<BstNode<T>>;
  val: int;
}

struct BstNode<T> {
  left: union<ref<BstNode<T>>, null>;
  right: union<ref<BstNode<T>>, null>;
  add: fn<BstNodeAddParams, void>;
  value: T;
}

struct BstAddParams<T> {
  self: ref<Bst<T>>;
  val: int;
}

struct Bst<T> {
  root: union<BstNode<T>, null>;
  add: fn<BstAddParams<T>, void>;
}

func createBstNode(int val) BstNode<int> {
  return <BstNode<int>>{
    left: null,
    right: null,
    value: val,
    add: func (ref<BstNode<int>> self, int val) void {
      if (val < clone(self.value)) {
        if (self.left == null) {
          self.left = ref(createBstNode(val));
        } else {
          self.left.add(val);
        }
      } else {
        if (self.right == null) {
          self.right = ref(createBstNode(val));
        } else {
          self.right.add(val);
        }
      }
    }
  }
}

func createBst() Bst<int> {
  return <Bst<int>>{
    root: null,
    add: func (ref<Bst<int>> self, int val) void {
      if (self.root == null) {
        self.root = createBstNode(val);
      } else {
        self.root.add(val);
      }
    }
  }
}

Bst<int> a = createBst();

for (i; 0; 10) {
  a.add(i);
}

// a.add(2);
// a.add(4);
// a.add(3);
// a.add(5);

println(a);
free(a);
